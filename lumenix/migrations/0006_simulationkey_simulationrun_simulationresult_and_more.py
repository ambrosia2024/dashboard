# Generated by Django 5.2.1 on 2025-10-07 12:08

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('lumenix', '0005_cropmaster_agrovoc_notation_cropmaster_agrovoc_uri'),
    ]

    operations = [
        migrations.CreateModel(
            name='SimulationKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[(1, 'Active'), (0, 'Inactive'), (2, 'Deleted')], default=1, verbose_name='Status')),
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('simulation_type', models.CharField(max_length=64)),
                ('crop', models.CharField(max_length=255)),
                ('nuts_id', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator('^[A-Z]{2}\\d{1,2}$', message='NUTS code like NL4 or NL42')])),
                ('climate_model', models.CharField(choices=[('RCP2.6', 'RCP2.6'), ('RCP4.5', 'RCP4.5'), ('RCP6', 'RCP6'), ('RCP8.5', 'RCP8.5')], max_length=16)),
                ('time_period_start', models.DateField()),
                ('time_period_end', models.DateField()),
                ('time_scale', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('decade', 'Decade')], max_length=16)),
                ('request_hash', models.CharField(editable=False, max_length=64, unique=True)),
            ],
            options={
                'db_table': 'simulation_keys',
                'indexes': [models.Index(fields=['simulation_type', 'crop', 'nuts_id', 'climate_model', 'time_scale', 'time_period_start', 'time_period_end'], name='idx_simkey_fields')],
                'constraints': [models.UniqueConstraint(fields=('simulation_type', 'crop', 'nuts_id', 'climate_model', 'time_scale', 'time_period_start', 'time_period_end'), name='uq_simkey_fields')],
            },
        ),
        migrations.CreateModel(
            name='SimulationRun',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, null=True, verbose_name='Deleted At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('job_id', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('queued', 'Queued'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], max_length=16)),
                ('submission_timestamp', models.BigIntegerField(blank=True, null=True)),
                ('completion_timestamp', models.CharField(blank=True, max_length=64, null=True)),
                ('sim_key', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='lumenix.simulationkey')),
            ],
            options={
                'db_table': 'simulation_runs',
            },
        ),
        migrations.CreateModel(
            name='SimulationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idx', models.PositiveIntegerField()),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='lumenix.simulationrun')),
            ],
            options={
                'db_table': 'simulation_results',
            },
        ),
        migrations.AddIndex(
            model_name='simulationrun',
            index=models.Index(fields=['status'], name='simulation__status_e70ec8_idx'),
        ),
        migrations.AddIndex(
            model_name='simulationrun',
            index=models.Index(fields=['sim_key', 'updated_at'], name='simulation__sim_key_ade6d7_idx'),
        ),
        migrations.AddIndex(
            model_name='simulationresult',
            index=models.Index(fields=['job', 'idx'], name='simulation__job_id_45ceda_idx'),
        ),
        migrations.AddConstraint(
            model_name='simulationresult',
            constraint=models.UniqueConstraint(fields=('job', 'idx'), name='uq_result_job_idx'),
        ),
    ]
